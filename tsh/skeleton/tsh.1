.\" Process this file with
.\" groff -man -Tascii tsh.1
.\"
.TH TSH 1 "Project-1" "Fall-2014" "EECS 343 - Project 1 - Fall 2014" 
.SH NAME
tsh \- A tiny shell
.SH SYNOPSIS
.B tsh
.SH DESCRIPTION
.B tsh
This is a simple implementation of the command line shell interpreter. A number of built-in commands were implemented - fg, bg, jobs, quit. If the commands are built in commands the shell handles it immediately and waits for the next command. The other commands such as ls and cd were implemented using the PATH enviroment variable. The shell allows you to handle all the terminated jobs, stopped jobs and reaps all the zombie children. 
.SH BUILT-IN COMMANDS
.IP
.IP bg [job_id]
Executes a stopped job in the background and does not wait for completion (takes id of job as an argument)
.IP fg [job_id]
Returns a background job to the foreground and waits for completion (takes id of job as an argument)  
.IP jobs
Lists all background jobs and their ids, running, stopped, or recently terminated
.IP exit
Exits tsh
.IP cd [directory]
Allows the user to change directories from the current working directory
.IP alias [aliasname]='tsh command'
Allows an alias to be used in place of the command
.IP unalias [aliasname]
Removes the alias for an aliased command
.SH DESIGN APPROACH
.LP A shell exists to control the execution of programs. To facilitate this we have implemented the following:
.IP \[bu] 2
Blocking execution
.IP \[bu]
Stopping the execution of a foreground process
.IP \[bu]
Terminating the execution of foreground process
.IP \[bu]
Non-blocking execution
.IP \[bu]
Switching between nonblocking and blocking execution patterns
.IP \[bu]
Job listing
.IP \[bu]
Directory changing
.IP \[bu]
Aliasing of commands
.IP \[bu]
Piped execution of processes
.IP \[bu]
Redirection of input to come from a file
.IP \[bu]
Redirection of output to go to a file
.LP The following are design decisions and their motivations:
.IP "The implmentation of fg and bg are handled by a single function." 0.4i
Don't repeat yourself.
.IP "The implementation of piping and other kinds of execution are in two separate functions."
The recursive model of piping doesn't mesh well with Execs way of running a single command.
.IP "Implementation of piping as a recursive function."
Allows simple passing of file descriptors. Mimics logical behavior.
.IP "Blocking execution waits for a job flag to change rather than calling waitpid."
Modularity, use the jobs list as an interface.
.IP "All wait system calls are non-blocking and are done in SigChldHandler."
Modularity, use the jobs list as an interface.
.IP "Substitution of tilde (~) for $HOME is done in Interpret."
Simplest implementation, didn't require changing anything else.
.IP "Implementation of the jobs list as a bidirectionally linked list."
Easy coalescing. No bounded size.
.IP "Putting every child process in its own process group."
Ensure that signals must be explicitly routed by the shell.
.IP "Broadcast signal only to the foreground process."
Ensure that background processes are not inadvertently terminated.
.SH AUTHOR
Adrien Tateno - 
adrientateno2016@u.northwestern.edu, 
Surabhi Ravishankar - 
surabhiravishankar2016@u.northwestern.edu 
